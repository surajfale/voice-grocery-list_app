/**
 * Utility functions for downloading and sharing grocery lists in multiple formats
 */
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

/**
 * Generates a formatted text string from grocery list items
 * @param {Array} items - Array of grocery items
 * @param {string} dateString - Date string for the list
 * @param {Function} formatDateDisplay - Function to format date for display
 * @returns {string} Formatted text content
 */
export const generateListText = (items, dateString, formatDateDisplay) => {
  if (!items || items.length === 0) {
    return `Grocery List - ${formatDateDisplay(dateString)}\n\nNo items in this list.`;
  }

  // Group items by category
  const groupedItems = items.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push(item);
    return acc;
  }, {});

  // Build the text content
  let content = `Grocery List - ${formatDateDisplay(dateString)}\n`;
  content += `${'='.repeat(50)}\n\n`;

  // Add statistics
  const completedCount = items.filter(item => item.completed).length;
  const totalCount = items.length;
  content += `Progress: ${completedCount}/${totalCount} items (${Math.round((completedCount / totalCount) * 100)}%)\n\n`;

  // Add items grouped by category
  Object.entries(groupedItems).forEach(([category, categoryItems]) => {
    content += `${category}\n`;
    content += `${'-'.repeat(category.length)}\n`;

    categoryItems.forEach(item => {
      const checkbox = item.completed ? '☑' : '☐';
      content += `${checkbox} ${item.text}\n`;
    });

    content += '\n';
  });

  content += `\n${'='.repeat(50)}\n`;
  content += `Generated by Voice Grocery List App\n`;
  content += `${new Date().toLocaleString()}\n`;

  return content;
};

/**
 * Downloads a text file with the grocery list content
 * @param {string} content - Text content to download
 * @param {string} dateString - Date string for filename
 */
export const downloadListAsText = (content, dateString) => {
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `grocery-list-${dateString}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

/**
 * Captures an HTML element as an image and downloads it
 * @param {HTMLElement} element - DOM element to capture
 * @param {string} dateString - Date string for filename
 * @returns {Promise<Blob>} - Promise that resolves with the image blob
 */
export const captureAsImage = async (element, dateString) => {
  try {
    const canvas = await html2canvas(element, {
      backgroundColor: '#ffffff',
      scale: 2, // Higher quality
      logging: false,
      useCORS: true,
    });

    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        resolve(blob);
      }, 'image/png');
    });
  } catch (error) {
    console.error('Error capturing image:', error);
    throw error;
  }
};

/**
 * Downloads the grocery list as an image
 * @param {HTMLElement} element - DOM element to capture
 * @param {string} dateString - Date string for filename
 */
export const downloadListAsImage = async (element, dateString) => {
  try {
    const blob = await captureAsImage(element, dateString);
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `grocery-list-${dateString}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error downloading image:', error);
    throw error;
  }
};

/**
 * Downloads the grocery list as a PDF
 * @param {HTMLElement} element - DOM element to capture
 * @param {string} dateString - Date string for filename
 */
export const downloadListAsPDF = async (element, dateString) => {
  try {
    const canvas = await html2canvas(element, {
      backgroundColor: '#ffffff',
      scale: 2,
      logging: false,
      useCORS: true,
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // Add more pages if content is too long
    while (heightLeft > 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(`grocery-list-${dateString}.pdf`);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

/**
 * Shares the grocery list using Web Share API (mobile) or downloads as image (desktop)
 * @param {HTMLElement} element - DOM element to capture
 * @param {string} dateString - Date string for filename
 * @param {Function} formatDateDisplay - Function to format date for display
 */
export const shareList = async (element, dateString, formatDateDisplay) => {
  try {
    const blob = await captureAsImage(element, dateString);

    // Check if Web Share API is supported
    if (navigator.share && navigator.canShare) {
      const file = new File([blob], `grocery-list-${dateString}.png`, { type: 'image/png' });

      if (navigator.canShare({ files: [file] })) {
        await navigator.share({
          files: [file],
          title: 'Grocery List',
          text: `Grocery list for ${formatDateDisplay(dateString)}`,
        });
        return;
      }
    }

    // Fallback to download if sharing is not supported
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `grocery-list-${dateString}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    if (error.name !== 'AbortError') {
      console.error('Error sharing list:', error);
      throw error;
    }
    // User cancelled the share, ignore
  }
};

/**
 * Main function to download the grocery list (text format - for backward compatibility)
 * @param {Array} items - Array of grocery items
 * @param {string} dateString - Date string for the list
 * @param {Function} formatDateDisplay - Function to format date for display
 */
export const downloadGroceryList = (items, dateString, formatDateDisplay) => {
  const content = generateListText(items, dateString, formatDateDisplay);
  downloadListAsText(content, dateString);
};